server:
  port: ${PORT:8080}

spring:
  application:
    name: api-gateway
  cloud:
    discovery:
      enabled: true
    gateway:
      default-filters:
        - name: CircuitBreaker
          args:
            name: defaultCircuitBreaker
            fallbackUri: forward:/fallback
      routes:
        - id: comment-service
          uri: lb://comment-service
          predicates:
            - Path=/comments/**
          filters:
            - AuthenticationFilter
            - PrefixPath=/api
            - name: CircuitBreaker
              args:
                name: commentService
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"

        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/auth/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/notifications/**
          filters:
            - AuthenticationFilter
            - PrefixPath=/api
            - name: CircuitBreaker
              args:
                name: notificationService
                fallbackUri: forward:/fallback
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
  data:
    redis:
      host: localhost
      port: 6379

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    instance-id: ${spring.application.name}:${random.uuid}

jwt:
  secret: RhXaBqc61BPR096ne9wKakicROyahRodnC2fLvmz6iLVxXOfHsM3fYiCWz0eLTRU

resilience4j:
  circuitbreaker:
    instances:
      commentService:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 20000
        permittedNumberOfCallsInHalfOpenState: 2
        registerHealthIndicator: true
        allowHealthIndicatorToFail: true
      notificationService:
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 20000
        permittedNumberOfCallsInHalfOpenState: 2
        registerHealthIndicator: true
        allowHealthIndicatorToFail: true
    configs:
      default:
        registerHealthIndicator: true

resilience4j.timelimiter:
  instances:
    default:
      timeoutDuration: 5s
      cancelRunningFuture: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
  tracing:
    sampling:
      probability: 1.0
    baggage:
      correlation:
        enabled: true
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  health:
    circuitbreakers:
      enabled: true

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
